rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default rule - deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Rules for the users collection
    match /users/{userId} {
      // Allow users to read their own data
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their own document
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own document
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for the landingPageContent collection
    match /landingPageContent/{docId} {
      // Allow read for everyone
      allow read: if true;
      
      // Allow write only for admin users
      allow write: if isAdmin();
    }
    
    // Rules for the moms (Minutes of Meeting) collection
    match /moms/{momId} {
      // Allow read if the user is authenticated and the document's userId field matches the user's ID
      allow read: if request.auth != null && (
        resource == null || // For first-time creation
        resource.data.userId == request.auth.uid
      );
      
      // Allow write if the user is authenticated and they're setting the userId field to their own ID
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow update if the user is authenticated and they own the document
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid
      );
      
      // Allow delete if the user is authenticated and they own the document
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Rules for the transcriptions collection
    match /transcriptions/{transcriptId} {
      // Allow read if the user is authenticated
      allow read: if request.auth != null;
      
      // Allow write if the user is authenticated and they're setting the userId field to their own ID
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow update if the user is authenticated and they own the document (userId won't change)
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid;
      
      // Allow delete if the user is authenticated and they own the document
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
